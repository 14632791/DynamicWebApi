<#@ template hostspecific="true" language="C#" #>
<#@ include file="EF.Utility.CS.ttinclude" #><#@
 output extension=".cs" #><#

    var efHost = (EfTextTemplateHost)Host;
    var code = new CodeGenerationTools(this);
#>
using System;
using System.Collections.Generic;
using System.ComponentModel;
<#
       if (efHost.EntityFrameworkVersion >= new Version(4, 4))
        {
#>
using System.ComponentModel.DataAnnotations.Schema;
<#
        }
        else
        {
#>
using System.ComponentModel.DataAnnotations;
<#
        }
#>
namespace Metro.DynamicModeules.Models
{<#
    var tableSet = efHost.TableSet;
    var tableName = (string)tableSet.MetadataProperties["Table"].Value
        ?? tableSet.Name;
    var schemaName = (string)tableSet.MetadataProperties["Schema"].Value;
#>
<#
    if (schemaName == "dbo" || string.IsNullOrWhiteSpace(schemaName))
    {
#>

    [Table("<#= tableName #>")]
<#
    }
    else
    {
#>

    [Table("<#= tableName #>", Schema="<#= schemaName #>")]
<#
}
#>
    public partial class <#= efHost.EntityType.Name #>: INotifyPropertyChanged
    {
	
<#
    var collectionNavigations = efHost.EntityType.NavigationProperties.Where(
        np => np.DeclaringType == efHost.EntityType
            && np.ToEndMember.RelationshipMultiplicity == RelationshipMultiplicity.Many);

    // Add a ctor to initialize any collections
    if (collectionNavigations.Any())
    {
#>
        public <#= code.Escape(efHost.EntityType) #>()
        {
<#
        foreach (var navProperty in collectionNavigations)
        {
#>
            this.<#= code.Escape(navProperty) #> = new List<<#= code.Escape(navProperty.ToEndMember.GetEntityType()) #>>();
<#
        }
#>
        }

<#
    }
        
    foreach (var property in efHost.EntityType.Properties)
    {
		#>[Column("<#= efHost.PropertyToColumnMappings[property].Name #>")]
<#
        var typeUsage = code.Escape(property.TypeUsage);

        // Fix-up spatial types for EF6
        if (efHost.EntityFrameworkVersion >= new Version(6, 0)
            && typeUsage.StartsWith("System.Data.Spatial."))
        {
            typeUsage = typeUsage.Replace(
                "System.Data.Spatial.",
                "System.Data.Entity.Spatial.");
        }
#>
        <#= Accessibility.ForProperty(property) #> <#= typeUsage #> <#= code.Escape(property) #> 
		{ 
		   get
           {
               return _<#= code.Escape(property) #>;
           }
           set
           {
               if (Equals(_<#= code.Escape(property) #>, value)) return;
               _<#= code.Escape(property) #> = value;
               RaisePropertyChanged("<#= code.Escape(property) #>");
           }
		} 
		<#= typeUsage #> _<#= code.Escape(property) #>;
<#
    }

    foreach (var navProperty in efHost.EntityType.NavigationProperties.Where(np => np.DeclaringType == efHost.EntityType))
    {
        if (navProperty.ToEndMember.RelationshipMultiplicity == RelationshipMultiplicity.Many)
        {
#>
        public virtual ICollection<<#= code.Escape(navProperty.ToEndMember.GetEntityType()) #>> <#= code.Escape(navProperty) #> 
		{ 
		   get
           {
               return _<#= code.Escape(navProperty) #>;
           }
           set
           {
               if (Equals(_<#= code.Escape(navProperty) #>, value)) return;
               _<#= code.Escape(navProperty) #> = value;
               RaisePropertyChanged("<#= code.Escape(navProperty) #>");
           }
		}
		  protected ICollection<<#= code.Escape(navProperty.ToEndMember.GetEntityType()) #>> _<#= code.Escape(navProperty) #>; 
      
<#
        }
        else
        {
#>
        public virtual <#= code.Escape(navProperty.ToEndMember.GetEntityType()) #> <#= code.Escape(navProperty) #> 
		{ 
		   get
           {
               return _<#= code.Escape(navProperty) #>;
           }
           set
           {
               if (Equals(_<#= code.Escape(navProperty) #>, value)) return;
               _<#= code.Escape(navProperty) #> = value;
               RaisePropertyChanged("<#= code.Escape(navProperty) #>");
           }
		}
		 protected <#= code.Escape(navProperty.ToEndMember.GetEntityType()) #> _<#= code.Escape(navProperty) #>; 
       
<#
        }
    }
#>
        public event PropertyChangedEventHandler PropertyChanged;

        /// <summary>
        /// Raises the PropertyChanged event if needed.
        /// </summary>
        /// <param name="propertyName">The name of the property that changed.</param>
        protected virtual void RaisePropertyChanged(string propertyName)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }
}
